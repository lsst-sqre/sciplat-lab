#!/bin/bash

#
# This is now obsolete.  You should use the Makefile instead.  Once our
#  ci jobs are updated, this script will be deleted.
#

set -e

function usage() {
    echo 1>&2 "Usage: $0 [-v] [-d] [-x] [-i image] [-s additional] TAG"
    echo 1>&2 "  -v is verbose."
    echo 1>&2 "  -d enables dry run (no Docker build or push)"
    echo 1>&2 "  -x is 'do not push' (but does build)."
    echo 1>&2 "  -i image specifies target image location."
    echo 1>&2 "  -s additional adds '_additional' to end of exp. build tag."
    echo 1>&2 "  default image='docker.io/lsstsqre/sciplat-lab'"
    echo 1>&2 "  typical TAG='w_2021_03'"
    exit 2
}

function cleanup {
    if [ -n "${WORKDIR}" ]; then
        rm -rf ${WORKDIR}
    fi
}

trap cleanup EXIT
WORKDIR=""
OPTIND=1
DRY_RUN=0
SUPPLEMENTARY=0
NOPUSH=0
VERBOSE=0
IMAGE="docker.io/lsstsqre/sciplat-lab"
while getopts ':hvdxi:s:efpt:n:b:' opt; do
    case $opt in
    h)
        usage
        ;;
    v)
	VERBOSE=1
	set -x
	;;
    d)
        DRY_RUN=1
        ;;
    x)
        NOPUSH=1
        ;;
    i)
	IMAGE=${OPTARG}
	;;
    s)
	SUPPLEMENTARY=1
	addltag=${OPTARG}
	;;
    e | f | p| t | n | b)
	echo "Obsolete option ${opt} no longer has any effect."
	;;
    \?)
        usage
        ;;
    esac
done
shift $((OPTIND - 1))
TAG=${1}
if [ -z "${TAG}" ] || [ $# -gt 1 ]; then
    usage
fi
VERSION=${TAG/#v/r}
if [ "${SUPPLEMENTARY}" -eq 1 ] && [ -n "${addltag}" ]; then
    VERSION="exp_${VERSION}_${addltag}"
fi
if [ "${NOPUSH}" -eq 1 ]; then
    VERSION="nopush_${VERSION}"
fi
sed -e "s|{{IMAGE}}|${IMAGE}|g" \
    -e "s|{{VERSION}}|${VERSION}|g" \
    -e "s|{{TAG}}|${TAG}|g" \
    < Dockerfile.template > Dockerfile
if [ "${VERBOSE}" -ne 0 ]; then
    echo 1>&2 "Dockerfile:"
    echo 1>&2 " "
    cat 1>&2 Dockerfile
    echo 1>&2 " "
fi
if [ "${DRY_RUN}" -ne 0 ]; then
    echo 1>&2 "Dry run: Dockerfile written, stopping before build/push."
    exit 0
fi
platform=""
if [ "$(uname -p)" == "arm" ]; then
    platform="--platform=amd64" # There is no ARM build yet, so cross-build
fi

# You probably want to set DOCKER_BUILDKIT in your environment if your
#  Docker supports it.
docker build ${platform} --progress=plain -t ${IMAGE}:${VERSION} .
rc=$?
if [ "${rc}" -ne 0 ]; then
    echo 1>&2 "Docker build failed."
    exit 1
fi
EXPERIMENTAL=0
etag=$(echo "${VERSION}" | cut -d '_' -f 1)
if [ "${etag}" = "nopush" ]; then
    exit 0
fi
if [ "${etag}" = "exp" ]; then
    EXPERIMENTAL=1
fi
docker push ${IMAGE}:${VERSION}
if [ "${EXPERIMENTAL}" -ne 1 ]; then
    ichar=$(echo "${VERSION}" | cut -c 1)
    itype=""
    case $ichar in
    "r")
        itype="release"
        ;;
    "w")
        itype="weekly"
        ;;
    "d")
        itype="daily"
        ;;
    *)
        ;;
    esac
if [ -n "$itype" ]; then
    docker tag ${IMAGE}:${VERSION} ${IMAGE}:latest_${itype}
    docker push ${IMAGE}:latest_${itype}
    fi
    docker tag ${IMAGE}:${VERSION} ${IMAGE}:latest
    docker push ${IMAGE}:latest
fi
