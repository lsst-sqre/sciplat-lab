name: Manually triggered build of sciplat-lab container

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'EUPS tag of input DM Pipelines Stack container'
        required: true
        default: ''
      supplementary:
        description: 'Supplementary tag for experimental builds; yields output tag exp_tag_supplementary'
        required: false
        default: ''
      image:
        description: 'fully-qualified URI for output Docker image'
        required: false
        default: 'docker.io/lsstsqre/sciplat-lab'
        # someday, perhaps: 'ghcr.io/lsst-sqre/sciplat-lab'
      push:
        description: 'push resulting image; make empty or set to a YAML-false string to build but not push'
        required: false
        default: 'true'

# We need actions/write if we want to do a GH App, and we need
# packages/write to push to ghcr.io
permissions:
  actions: write
  contents: read
  packages: write
  statuses: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: import_inputs
      shell: bash
      run: |
        echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
        echo "supplementary=${{ github.event.inputs.supplementary }}" >> $GITHUB_ENV
        echo "image=${{ github.event.inputs.image }}" >> $GITHUB_ENV
        echo "push=${{ github.event.inputs.push }}">> $GITHUB_ENV

    - name: parse_env
      shell: bash
      run: |
         case ${{ env.push }} in
             ''|n|N|no|No|NO|false|False|FALSE|off|Off|OFF)
                 echo "target=image" >> $GITHUB_ENV
                 ;;
             *)
                 echo "target=push" >> $GITHUB_ENV
                 ;;
         esac
         make_args="tag=${{ env.tag }}"
         if [ -n "${{ env.supplementary }}" ]; then
             make_args="${make_args} supplementary=${{ env.supplementary }}"
         fi
         if [ -n "${{ env.image }}" ]; then
             make_args="${make_args} image=${{ env.image }}"
         fi
         echo "make_args=${make_args}" >> $GITHUB_ENV
         c_image_host=$(echo ${{ env.image }} | cut -d '/' -f 1 | rev | cut -d '.' -f 1-2 | rev)
         case ${c_image_host} in
             docker.com | docker.io)
                 d_repository="docker.io"
                 d_username=${{ secrets.DOCKER_USERNAME }}
                 d_password=${{ secrets.DOCKER_TOKEN }}
                 ;;
             ghcr.io)
                 d_repository="ghcr.io"
                 d_username=${{ github.actor }}
                 d_password=${{ secrets.GITHUB_TOKEN}}
                 ;;
             *)
                 d_repository=${c_image_host}
                 d_username=''
                 d_password=''
                 ;;
         esac
         echo "d_repository=${d_repository}" >> $GITHUB_ENV
         echo "d_username=${d_username}" >> $GITHUB_ENV
         echo "d_password=${d_password}" >> $GITHUB_ENV

    - name: Log in to Docker repository
      # Only bother if we're going to push the container and we have
      #  credentials
      if: >-
        ((env.target == 'push') &&
         (env.d_repository != '') &&
         (env.d_username != '') &&
         (env.d_password != ''))
      uses: docker/login-action@v1
      with:
        repository: ${{ env.d_repository }}
        username: ${{ env.d_username }}
        password: ${{ env.d_password }}

    - name: build
      shell: bash
      run: |
            make ${{ env.make_args }} ${{ env.target }}

